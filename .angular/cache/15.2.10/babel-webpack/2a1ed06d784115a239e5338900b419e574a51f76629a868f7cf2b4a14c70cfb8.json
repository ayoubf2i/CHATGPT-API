{"ast":null,"code":"import 'firebase/compat/auth';\nimport { isPlatformServer } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, PLATFORM_ID, Injectable, Inject, Optional, NgModule } from '@angular/core';\nimport * as i1 from '@angular/fire';\nimport { keepUnstableUntilFirst, VERSION } from '@angular/fire';\nimport * as i2 from '@angular/fire/app-check';\nimport { ɵcacheInstance, ɵfirebaseAppFactory, ɵlazySDKProxy, FIREBASE_OPTIONS, FIREBASE_APP_NAME, ɵapplyMixins } from '@angular/fire/compat';\nimport { Subject, of, Observable, from, merge } from 'rxjs';\nimport { observeOn, switchMap, map, shareReplay, first, switchMapTo, subscribeOn, filter } from 'rxjs/operators';\nimport firebase from 'firebase/compat/app';\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\n// Export a null object with the same keys as firebase/compat/auth, so Proxy can work with proxy-polyfill in Internet Explorer\nconst proxyPolyfillCompat = {\n  name: null,\n  config: null,\n  emulatorConfig: null,\n  app: null,\n  applyActionCode: null,\n  checkActionCode: null,\n  confirmPasswordReset: null,\n  createUserWithEmailAndPassword: null,\n  currentUser: null,\n  fetchSignInMethodsForEmail: null,\n  isSignInWithEmailLink: null,\n  getRedirectResult: null,\n  languageCode: null,\n  settings: null,\n  onAuthStateChanged: null,\n  onIdTokenChanged: null,\n  sendSignInLinkToEmail: null,\n  sendPasswordResetEmail: null,\n  setPersistence: null,\n  signInAndRetrieveDataWithCredential: null,\n  signInAnonymously: null,\n  signInWithCredential: null,\n  signInWithCustomToken: null,\n  signInWithEmailAndPassword: null,\n  signInWithPhoneNumber: null,\n  signInWithEmailLink: null,\n  signInWithPopup: null,\n  signInWithRedirect: null,\n  signOut: null,\n  tenantId: null,\n  updateCurrentUser: null,\n  useDeviceLanguage: null,\n  useEmulator: null,\n  verifyPasswordResetCode: null\n};\nconst USE_EMULATOR = new InjectionToken('angularfire2.auth.use-emulator');\nconst SETTINGS = new InjectionToken('angularfire2.auth.settings');\nconst TENANT_ID = new InjectionToken('angularfire2.auth.tenant-id');\nconst LANGUAGE_CODE = new InjectionToken('angularfire2.auth.langugage-code');\nconst USE_DEVICE_LANGUAGE = new InjectionToken('angularfire2.auth.use-device-language');\nconst PERSISTENCE = new InjectionToken('angularfire.auth.persistence');\nconst ɵauthFactory = (app, zone, useEmulator, tenantId, languageCode, useDeviceLanguage, settings, persistence) => ɵcacheInstance(`${app.name}.auth`, 'AngularFireAuth', app.name, () => {\n  const auth = zone.runOutsideAngular(() => app.auth());\n  if (useEmulator) {\n    auth.useEmulator(...useEmulator);\n  }\n  if (tenantId) {\n    auth.tenantId = tenantId;\n  }\n  auth.languageCode = languageCode;\n  if (useDeviceLanguage) {\n    auth.useDeviceLanguage();\n  }\n  if (settings) {\n    for (const [k, v] of Object.entries(settings)) {\n      auth.settings[k] = v;\n    }\n  }\n  if (persistence) {\n    auth.setPersistence(persistence);\n  }\n  return auth;\n}, [useEmulator, tenantId, languageCode, useDeviceLanguage, settings, persistence]);\nclass AngularFireAuth {\n  /**\n   * Observable of authentication state; as of Firebase 4.0 this is only triggered via sign-in/out\n   */\n  authState;\n  /**\n   * Observable of the currently signed-in user's JWT token used to identify the user to a Firebase service (or null).\n   */\n  idToken;\n  /**\n   * Observable of the currently signed-in user (or null).\n   */\n  user;\n  /**\n   * Observable of the currently signed-in user's IdTokenResult object which contains the ID token JWT string and other\n   * helper properties for getting different data associated with the token as well as all the decoded payload claims\n   * (or null).\n   */\n  idTokenResult;\n  /**\n   * Observable of the currently signed-in user's credential, or null\n   */\n  credential;\n  constructor(options, name,\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  platformId, zone, schedulers, useEmulator,\n  // can't use the tuple here\n  settings,\n  // can't use firebase.auth.AuthSettings here\n  tenantId, languageCode, useDeviceLanguage, persistence, _appCheckInstances) {\n    const logins = new Subject();\n    const auth = of(undefined).pipe(observeOn(schedulers.outsideAngular), switchMap(() => zone.runOutsideAngular(() => import('firebase/compat/auth'))), map(() => ɵfirebaseAppFactory(options, zone, name)), map(app => ɵauthFactory(app, zone, useEmulator, tenantId, languageCode, useDeviceLanguage, settings, persistence)), shareReplay({\n      bufferSize: 1,\n      refCount: false\n    }));\n    if (isPlatformServer(platformId)) {\n      this.authState = this.user = this.idToken = this.idTokenResult = this.credential = of(null);\n    } else {\n      // HACK, as we're exporting auth.Auth, rather than auth, developers importing firebase.auth\n      //       (e.g, `import { auth } from 'firebase/compat/app'`) are getting an undefined auth object unexpectedly\n      //       as we're completely lazy. Let's eagerly load the Auth SDK here.\n      //       There could potentially be race conditions still... but this greatly decreases the odds while\n      //       we reevaluate the API.\n      auth.pipe(first()).subscribe();\n      const redirectResult = auth.pipe(switchMap(auth => auth.getRedirectResult().then(it => it, () => null)), keepUnstableUntilFirst, shareReplay({\n        bufferSize: 1,\n        refCount: false\n      }));\n      const authStateChanged = auth.pipe(switchMap(auth => new Observable(sub => ({\n        unsubscribe: zone.runOutsideAngular(() => auth.onAuthStateChanged(next => sub.next(next), err => sub.error(err), () => sub.complete()))\n      }))));\n      const idTokenChanged = auth.pipe(switchMap(auth => new Observable(sub => ({\n        unsubscribe: zone.runOutsideAngular(() => auth.onIdTokenChanged(next => sub.next(next), err => sub.error(err), () => sub.complete()))\n      }))));\n      this.authState = redirectResult.pipe(switchMapTo(authStateChanged), subscribeOn(schedulers.outsideAngular), observeOn(schedulers.insideAngular));\n      this.user = redirectResult.pipe(switchMapTo(idTokenChanged), subscribeOn(schedulers.outsideAngular), observeOn(schedulers.insideAngular));\n      this.idToken = this.user.pipe(switchMap(user => user ? from(user.getIdToken()) : of(null)));\n      this.idTokenResult = this.user.pipe(switchMap(user => user ? from(user.getIdTokenResult()) : of(null)));\n      this.credential = merge(redirectResult, logins,\n      // pipe in null authState to make credential zipable, just a weird devexp if\n      // authState and user go null to still have a credential\n      this.authState.pipe(filter(it => !it))).pipe(\n      // handle the { user: { } } when a user is already logged in, rather have null\n      // TODO handle the type corcersion better\n      map(credential => credential?.user ? credential : null), subscribeOn(schedulers.outsideAngular), observeOn(schedulers.insideAngular));\n    }\n    return ɵlazySDKProxy(this, auth, zone, {\n      spy: {\n        apply: (name, _, val) => {\n          // If they call a signIn or createUser function listen into the promise\n          // this will give us the user credential, push onto the logins Subject\n          // to be consumed in .credential\n          if (name.startsWith('signIn') || name.startsWith('createUser')) {\n            // TODO fix the types, the trouble is UserCredential has everything optional\n            val.then(user => logins.next(user));\n          }\n        }\n      }\n    });\n  }\n  static ɵfac = function AngularFireAuth_Factory(t) {\n    return new (t || AngularFireAuth)(i0.ɵɵinject(FIREBASE_OPTIONS), i0.ɵɵinject(FIREBASE_APP_NAME, 8), i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1.ɵAngularFireSchedulers), i0.ɵɵinject(USE_EMULATOR, 8), i0.ɵɵinject(SETTINGS, 8), i0.ɵɵinject(TENANT_ID, 8), i0.ɵɵinject(LANGUAGE_CODE, 8), i0.ɵɵinject(USE_DEVICE_LANGUAGE, 8), i0.ɵɵinject(PERSISTENCE, 8), i0.ɵɵinject(i2.AppCheckInstances, 8));\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: AngularFireAuth,\n    factory: AngularFireAuth.ɵfac,\n    providedIn: 'any'\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AngularFireAuth, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'any'\n    }]\n  }], () => [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [FIREBASE_OPTIONS]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [FIREBASE_APP_NAME]\n    }]\n  }, {\n    type: Object,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }, {\n    type: i0.NgZone\n  }, {\n    type: i1.ɵAngularFireSchedulers\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [USE_EMULATOR]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [SETTINGS]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [TENANT_ID]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [LANGUAGE_CODE]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [USE_DEVICE_LANGUAGE]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [PERSISTENCE]\n    }]\n  }, {\n    type: i2.AppCheckInstances,\n    decorators: [{\n      type: Optional\n    }]\n  }], null);\n})();\nɵapplyMixins(AngularFireAuth, [proxyPolyfillCompat]);\nclass AngularFireAuthModule {\n  constructor() {\n    firebase.registerVersion('angularfire', VERSION.full, 'auth-compat');\n  }\n  static ɵfac = function AngularFireAuthModule_Factory(t) {\n    return new (t || AngularFireAuthModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: AngularFireAuthModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [AngularFireAuth]\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AngularFireAuthModule, [{\n    type: NgModule,\n    args: [{\n      providers: [AngularFireAuth]\n    }]\n  }], () => [], null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AngularFireAuth, AngularFireAuthModule, LANGUAGE_CODE, PERSISTENCE, SETTINGS, TENANT_ID, USE_DEVICE_LANGUAGE, USE_EMULATOR, ɵauthFactory };","map":{"version":3,"names":["isPlatformServer","i0","InjectionToken","PLATFORM_ID","Injectable","Inject","Optional","NgModule","i1","keepUnstableUntilFirst","VERSION","i2","ɵcacheInstance","ɵfirebaseAppFactory","ɵlazySDKProxy","FIREBASE_OPTIONS","FIREBASE_APP_NAME","ɵapplyMixins","Subject","of","Observable","from","merge","observeOn","switchMap","map","shareReplay","first","switchMapTo","subscribeOn","filter","firebase","proxyPolyfillCompat","name","config","emulatorConfig","app","applyActionCode","checkActionCode","confirmPasswordReset","createUserWithEmailAndPassword","currentUser","fetchSignInMethodsForEmail","isSignInWithEmailLink","getRedirectResult","languageCode","settings","onAuthStateChanged","onIdTokenChanged","sendSignInLinkToEmail","sendPasswordResetEmail","setPersistence","signInAndRetrieveDataWithCredential","signInAnonymously","signInWithCredential","signInWithCustomToken","signInWithEmailAndPassword","signInWithPhoneNumber","signInWithEmailLink","signInWithPopup","signInWithRedirect","signOut","tenantId","updateCurrentUser","useDeviceLanguage","useEmulator","verifyPasswordResetCode","USE_EMULATOR","SETTINGS","TENANT_ID","LANGUAGE_CODE","USE_DEVICE_LANGUAGE","PERSISTENCE","ɵauthFactory","zone","persistence","auth","runOutsideAngular","k","v","Object","entries","AngularFireAuth","authState","idToken","user","idTokenResult","credential","constructor","options","platformId","schedulers","_appCheckInstances","logins","undefined","pipe","outsideAngular","bufferSize","refCount","subscribe","redirectResult","then","it","authStateChanged","sub","unsubscribe","next","err","error","complete","idTokenChanged","insideAngular","getIdToken","getIdTokenResult","spy","apply","_","val","startsWith","ɵfac","NgZone","ɵAngularFireSchedulers","AppCheckInstances","ɵprov","type","args","providedIn","decorators","AngularFireAuthModule","registerVersion","full","ɵmod","ɵinj","providers"],"sources":["C:/Users/ayoub/OneDrive/Bureau/Projet-ChatAPI-Angular-main/node_modules/@angular/fire/fesm2022/angular-fire-compat-auth.mjs"],"sourcesContent":["import 'firebase/compat/auth';\nimport { isPlatformServer } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, PLATFORM_ID, Injectable, Inject, Optional, NgModule } from '@angular/core';\nimport * as i1 from '@angular/fire';\nimport { keepUnstableUntilFirst, VERSION } from '@angular/fire';\nimport * as i2 from '@angular/fire/app-check';\nimport { ɵcacheInstance, ɵfirebaseAppFactory, ɵlazySDKProxy, FIREBASE_OPTIONS, FIREBASE_APP_NAME, ɵapplyMixins } from '@angular/fire/compat';\nimport { Subject, of, Observable, from, merge } from 'rxjs';\nimport { observeOn, switchMap, map, shareReplay, first, switchMapTo, subscribeOn, filter } from 'rxjs/operators';\nimport firebase from 'firebase/compat/app';\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\n// Export a null object with the same keys as firebase/compat/auth, so Proxy can work with proxy-polyfill in Internet Explorer\nconst proxyPolyfillCompat = {\n    name: null,\n    config: null,\n    emulatorConfig: null,\n    app: null,\n    applyActionCode: null,\n    checkActionCode: null,\n    confirmPasswordReset: null,\n    createUserWithEmailAndPassword: null,\n    currentUser: null,\n    fetchSignInMethodsForEmail: null,\n    isSignInWithEmailLink: null,\n    getRedirectResult: null,\n    languageCode: null,\n    settings: null,\n    onAuthStateChanged: null,\n    onIdTokenChanged: null,\n    sendSignInLinkToEmail: null,\n    sendPasswordResetEmail: null,\n    setPersistence: null,\n    signInAndRetrieveDataWithCredential: null,\n    signInAnonymously: null,\n    signInWithCredential: null,\n    signInWithCustomToken: null,\n    signInWithEmailAndPassword: null,\n    signInWithPhoneNumber: null,\n    signInWithEmailLink: null,\n    signInWithPopup: null,\n    signInWithRedirect: null,\n    signOut: null,\n    tenantId: null,\n    updateCurrentUser: null,\n    useDeviceLanguage: null,\n    useEmulator: null,\n    verifyPasswordResetCode: null,\n};\n\nconst USE_EMULATOR = new InjectionToken('angularfire2.auth.use-emulator');\nconst SETTINGS = new InjectionToken('angularfire2.auth.settings');\nconst TENANT_ID = new InjectionToken('angularfire2.auth.tenant-id');\nconst LANGUAGE_CODE = new InjectionToken('angularfire2.auth.langugage-code');\nconst USE_DEVICE_LANGUAGE = new InjectionToken('angularfire2.auth.use-device-language');\nconst PERSISTENCE = new InjectionToken('angularfire.auth.persistence');\nconst ɵauthFactory = (app, zone, useEmulator, tenantId, languageCode, useDeviceLanguage, settings, persistence) => ɵcacheInstance(`${app.name}.auth`, 'AngularFireAuth', app.name, () => {\n    const auth = zone.runOutsideAngular(() => app.auth());\n    if (useEmulator) {\n        auth.useEmulator(...useEmulator);\n    }\n    if (tenantId) {\n        auth.tenantId = tenantId;\n    }\n    auth.languageCode = languageCode;\n    if (useDeviceLanguage) {\n        auth.useDeviceLanguage();\n    }\n    if (settings) {\n        for (const [k, v] of Object.entries(settings)) {\n            auth.settings[k] = v;\n        }\n    }\n    if (persistence) {\n        auth.setPersistence(persistence);\n    }\n    return auth;\n}, [useEmulator, tenantId, languageCode, useDeviceLanguage, settings, persistence]);\nclass AngularFireAuth {\n    /**\n     * Observable of authentication state; as of Firebase 4.0 this is only triggered via sign-in/out\n     */\n    authState;\n    /**\n     * Observable of the currently signed-in user's JWT token used to identify the user to a Firebase service (or null).\n     */\n    idToken;\n    /**\n     * Observable of the currently signed-in user (or null).\n     */\n    user;\n    /**\n     * Observable of the currently signed-in user's IdTokenResult object which contains the ID token JWT string and other\n     * helper properties for getting different data associated with the token as well as all the decoded payload claims\n     * (or null).\n     */\n    idTokenResult;\n    /**\n     * Observable of the currently signed-in user's credential, or null\n     */\n    credential;\n    constructor(options, name, \n    // eslint-disable-next-line @typescript-eslint/ban-types\n    platformId, zone, schedulers, useEmulator, // can't use the tuple here\n    settings, // can't use firebase.auth.AuthSettings here\n    tenantId, languageCode, useDeviceLanguage, persistence, _appCheckInstances) {\n        const logins = new Subject();\n        const auth = of(undefined).pipe(observeOn(schedulers.outsideAngular), switchMap(() => zone.runOutsideAngular(() => import('firebase/compat/auth'))), map(() => ɵfirebaseAppFactory(options, zone, name)), map(app => ɵauthFactory(app, zone, useEmulator, tenantId, languageCode, useDeviceLanguage, settings, persistence)), shareReplay({ bufferSize: 1, refCount: false }));\n        if (isPlatformServer(platformId)) {\n            this.authState = this.user = this.idToken = this.idTokenResult = this.credential = of(null);\n        }\n        else {\n            // HACK, as we're exporting auth.Auth, rather than auth, developers importing firebase.auth\n            //       (e.g, `import { auth } from 'firebase/compat/app'`) are getting an undefined auth object unexpectedly\n            //       as we're completely lazy. Let's eagerly load the Auth SDK here.\n            //       There could potentially be race conditions still... but this greatly decreases the odds while\n            //       we reevaluate the API.\n            auth.pipe(first()).subscribe();\n            const redirectResult = auth.pipe(switchMap(auth => auth.getRedirectResult().then(it => it, () => null)), keepUnstableUntilFirst, shareReplay({ bufferSize: 1, refCount: false }));\n            const authStateChanged = auth.pipe(switchMap(auth => new Observable(sub => ({ unsubscribe: zone.runOutsideAngular(() => auth.onAuthStateChanged(next => sub.next(next), err => sub.error(err), () => sub.complete())) }))));\n            const idTokenChanged = auth.pipe(switchMap(auth => new Observable(sub => ({ unsubscribe: zone.runOutsideAngular(() => auth.onIdTokenChanged(next => sub.next(next), err => sub.error(err), () => sub.complete())) }))));\n            this.authState = redirectResult.pipe(switchMapTo(authStateChanged), subscribeOn(schedulers.outsideAngular), observeOn(schedulers.insideAngular));\n            this.user = redirectResult.pipe(switchMapTo(idTokenChanged), subscribeOn(schedulers.outsideAngular), observeOn(schedulers.insideAngular));\n            this.idToken = this.user.pipe(switchMap(user => user ? from(user.getIdToken()) : of(null)));\n            this.idTokenResult = this.user.pipe(switchMap(user => user ? from(user.getIdTokenResult()) : of(null)));\n            this.credential = merge(redirectResult, logins, \n            // pipe in null authState to make credential zipable, just a weird devexp if\n            // authState and user go null to still have a credential\n            this.authState.pipe(filter(it => !it))).pipe(\n            // handle the { user: { } } when a user is already logged in, rather have null\n            // TODO handle the type corcersion better\n            map(credential => credential?.user ? credential : null), subscribeOn(schedulers.outsideAngular), observeOn(schedulers.insideAngular));\n        }\n        return ɵlazySDKProxy(this, auth, zone, { spy: {\n                apply: (name, _, val) => {\n                    // If they call a signIn or createUser function listen into the promise\n                    // this will give us the user credential, push onto the logins Subject\n                    // to be consumed in .credential\n                    if (name.startsWith('signIn') || name.startsWith('createUser')) {\n                        // TODO fix the types, the trouble is UserCredential has everything optional\n                        val.then((user) => logins.next(user));\n                    }\n                }\n            } });\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.6\", ngImport: i0, type: AngularFireAuth, deps: [{ token: FIREBASE_OPTIONS }, { token: FIREBASE_APP_NAME, optional: true }, { token: PLATFORM_ID }, { token: i0.NgZone }, { token: i1.ɵAngularFireSchedulers }, { token: USE_EMULATOR, optional: true }, { token: SETTINGS, optional: true }, { token: TENANT_ID, optional: true }, { token: LANGUAGE_CODE, optional: true }, { token: USE_DEVICE_LANGUAGE, optional: true }, { token: PERSISTENCE, optional: true }, { token: i2.AppCheckInstances, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.0.6\", ngImport: i0, type: AngularFireAuth, providedIn: 'any' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.6\", ngImport: i0, type: AngularFireAuth, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'any'\n                }]\n        }], ctorParameters: () => [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [FIREBASE_OPTIONS]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [FIREBASE_APP_NAME]\n                }] }, { type: Object, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }, { type: i0.NgZone }, { type: i1.ɵAngularFireSchedulers }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [USE_EMULATOR]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [SETTINGS]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [TENANT_ID]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [LANGUAGE_CODE]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [USE_DEVICE_LANGUAGE]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [PERSISTENCE]\n                }] }, { type: i2.AppCheckInstances, decorators: [{\n                    type: Optional\n                }] }] });\nɵapplyMixins(AngularFireAuth, [proxyPolyfillCompat]);\n\nclass AngularFireAuthModule {\n    constructor() {\n        firebase.registerVersion('angularfire', VERSION.full, 'auth-compat');\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.6\", ngImport: i0, type: AngularFireAuthModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.0.6\", ngImport: i0, type: AngularFireAuthModule });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.0.6\", ngImport: i0, type: AngularFireAuthModule, providers: [AngularFireAuth] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.6\", ngImport: i0, type: AngularFireAuthModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [AngularFireAuth]\n                }]\n        }], ctorParameters: () => [] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AngularFireAuth, AngularFireAuthModule, LANGUAGE_CODE, PERSISTENCE, SETTINGS, TENANT_ID, USE_DEVICE_LANGUAGE, USE_EMULATOR, ɵauthFactory };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}